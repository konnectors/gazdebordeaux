/*
  // Gathering the API key (btoa stands for "binary-to-ASCII")
  log('info', 'Gathering the API key...')
  const response1 = await request(apiUrl + '/getAuthorization')
  log('info', 'API key successfully gathered')

  // Gathering the API token
  log('info', 'Gathering the API token...')
  const response2 = await request({
    url: apiUrl + '/authenticate',
    method: 'POST',
    headers: {
      Authorization: 'Basic ' + response1.apibtoa
    }
  })
  const apiAuthenticateToken = response2.data.token
  log('info', 'API token successfully gathered')
*/


/*
  // Check if contract is TRV (WORKS)
  log('info', 'Checking if contract is TRV...')
  const response3 = await request({
    url: apiUrl + '/client/is-contrat-trv',
    method: 'POST',
    headers: {
      Authorization: 'Bearer ' + apiAuthenticateToken,
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    },
    body: 'conChrono=1030650'
  })
  log('info', response3)
*/

/*
    // Gathering properties by key (BUT doens't work)
    // returns 'success=false, message=No value found for this key'
    log('info', 'Gathering properties by key...')
    const response3 = await request({
      url: apiUrl + '/config/get-properties-by-key',
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + apiAuthenticateToken,
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      },
      //body: 'checkConfig=true&key=googleTagManager'   <= WORKS
      //body: 'checkConfig=false&key=googleTagManager'  <= WORKS
      //body: 'key=googleTagManager'                    <= doesn't work
      //body: 'checkConfig=true&key=client'             <= doesn't work with true or false
      //body: 'checkConfig=true&key=cptId'              <= doesn't work
      //body: 'checkConfig=true&key=id'                 <= doesn't work
      //body: 'checkConfig=true&key=*'                  <= doesn't work
      //body: 'checkConfig=true&key='                   <= doesn't work
      //body: 'checkConfig=true&key=data-client-id'     <= à tester

    })
    log('info', response3)
*/


/*
  // Get conso chart data (WORKS)
  log('info', 'Gathering conso chart data...')
  const response3 = await request('https://espaceclient.gazdebordeaux.fr/getConsoChartData')
  log('info', response3)
*/

/*
  // Gathering Google Tag Manager (WORKS)
  log('info', 'Gathering properties by key...')
  const response3 = await request({
    url: apiUrl + '/config/get-properties-by-key',
    method: 'POST',
    headers: {
      Authorization: 'Bearer ' + apiToken,
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    },
    body: 'key=googleTagManager&checkConfig=true'
  })
  log('info', response3)
*/



/*
// Récupération des relevés
log('info', 'Gathering relevés...')
const myHeaders = new Headers();
myHeaders.append('Authorization', 'Bearer ' + apiToken)
myHeaders.append('Content-Type', 'application/vnd.api+json')
const myData = {
  conChrono : 1030650
}
const myInitWithTokenAndData = {
  method: 'POST',
  headers: myHeaders,
  body: JSON.stringify(myData)
}
const response = await fetch(apiUrl + '/compteur/transmission-index-detailles/get', myInitWithTokenAndData)
  .then(resp => resp)//.json())
log('info', response)
*/


/*
  // Récupération des coordonnées bancaires
  log('info', 'Gathering banking information...')
  const myHeaders = new Headers();
  myHeaders.append('Authorization', 'Bearer ' + apiToken)
  myHeaders.append('Content-Type', 'application/vnd.api+json')
  const myData = {
    cliChrono: 867472,
    conChrono: 1030650,
  }
  const myInitWithTokenAndData = {
    method: 'POST',
    headers: myHeaders,
    body: JSON.stringify(myData)
  }
  const response = await fetch(apiUrl + '/demande/getCoordonneesBancairesEnCours', myInitWithTokenAndData)
  //const response = await fetch(apiUrl + '/demande/getChangementTarifEnCours', myInitWithTokenAndData)
    .then(resp => resp.json())
  log('info', response)
*/



/*
  // Gathering customer information (WORKS)
  log('info', 'Gathering customer information...')
  const myInitWithToken = {
    'method': 'GET',
    'headers': { 'Authorization': 'Bearer ' + apiToken }
  }
  const response = await fetch(apiUrl + '/client/867472', myInitWithToken)
    .then(resp => resp.json())
  log('info', response)
*/


/**
 * API
 *
 * Récupérer les barêmes :
 * https://espaceclient.gazdebordeaux.fr/api/recupererBareme/33000/BORDEAUX
 *
 * Relevé détaillés :
 * https://espaceclient.gazdebordeaux.fr/api/compteur/transmission-index-detailles/get
 *
 * https://espaceclient.gazdebordeaux.fr/api/invoice/demat/get-by-client/clientId/1030650
 * https://espaceclient.gazdebordeaux.fr/api/demat/getInfos
 * https://espaceclient.gazdebordeaux.fr/api/document/getInfos
 * https://espaceclient.gazdebordeaux.fr/api/get-attestation-contrat


*/


/*
  // Gathering the customer reference
  log('info', `Retrieving customer reference...`)
  const $ = await request(dashboardUrl)
  const clientId = $(`div.infosPersosContainer`).attr(`data-client-id`)
  const contractId = $(`div.infosPersosContainer`).attr(`data-contract-id`)
  log('info', `Customer reference successfully retrieved (` + clientId + `)`)
  log('info', `Contract reference successfully retrieved (` + contractId + `)`)

  log('info', 'Fetching the list of documents')
  const errorMsg = `Please enable JavaScript to view the page content.`
  const $2 = await request.get(invoicesUrl)
  if ($2.html().includes(errorMsg)) {
    log('error', errorMsg)
  } else {
    log('info', $2.html())
    log('info', 'Parsing the documents...')
    const documents = await parseDocuments($2)
    log('info', documents)
  }
*/
